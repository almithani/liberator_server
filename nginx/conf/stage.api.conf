server {
    listen 80;
    server_name stagebooks.liberator.me;
    root /var/www/liberator_app_stage;
    default_type text/html;

    # https://dev.to/bambattajb/creating-an-api-with-lua-using-openresty-42mc
    # POST: this endpoint writes a reader's location to a files
    # GET: this endpoint gets a certain reader's place
    location ~ /(.*)/api/bookmark$ {
        default_type 'text/json';
        add_header 'Content-Type' 'application/json';

        content_by_lua_block {

            local cjson = require("cjson");
            local reqMethod = ngx.var.request_method;
            local filename = "/var/www/books_stage/"..ngx.var[1].."/"..ngx.var.arg_reader..".bookmark";
            
            if (reqMethod == 'POST') then
                ngx.req.read_body();
                local postArgs, err = ngx.req.get_post_args()

                if not postArgs then
                    return ngx.say(
                        cjson.encode({
                            status='FAIL',
                            error="failed to get post args",
                        })
                    );
                end

                --file:write(ngx.var.arg_char.."\n");
                local file = io.open(filename, "w");

                file:write(postArgs["char"].."\n");
                file:close();

            elseif (reqMethod == 'GET') then
                local file = io.open(filename, "r");
                local theChar = 0

                if not(file==nil) then
                    theChar = tonumber(file:read());
                end

                return ngx.say(
                    cjson.encode({
                        status='OK',
                        char=theChar,
                    })
                );
            end

            return ngx.say(
                cjson.encode({
                    status='OK',
                })
            );
        } #content_by_lua_block
    } #location ~ /(.*)/api/bookmark$

    # GET: gets all users bookmarks
    location ~ /(.*)/api/allBookmarks$ {
        default_type 'text/json';
        add_header 'Content-Type' 'application/json';

        content_by_lua_block {
            local cjson = require("cjson");
            local dirname = "/var/www/books_stage/"..ngx.var[1].."/";

            local p = io.popen('find '..dirname..'*.bookmark -maxdepth 1 -type f');
            local output = {};
            
            for filename in p:lines() do
                local file = io.open(filename, "r");
                local theChar = 0;

                local username = string.match(filename, "/(%w+)%.bookmark");

                if not(file==nil) then
                    theChar = tonumber(file:read());
                    output[username] = theChar;
                end
            end

            return ngx.say(
                cjson.encode({
                    status='OK',
                    bookmarks=output
                })
            );

        }#content_by_lua_block
    }#location ~ /(.*)/api/allBookmarks$

    # GET: gets the book meta information as JSON
    location ~ /(.*)/api/bookmeta$ {
        default_type 'text/json';
        add_header 'Content-Type' 'application/json';

        content_by_lua_block {
            local cjson = require("cjson");
            local filename = "/var/www/books_stage/"..ngx.var[1].."/book.meta";

            local file = io.open(filename, "r");
            local theContent = {};

            if not(file==nil) then
                for k,v in string.gmatch(file:read(), "(.+):(.+)") do
                    theContent[k]=tonumber(v)
                end

                theContent["status"]="OK"

                return ngx.say(
                    cjson.encode(theContent)
                );
            end

            --error case
            return ngx.say(
                cjson.encode({
                    status='FAIL',
                    error="Could not find book metadata",
                })
            );
        }
    } #location ~ /(.*)/api/bookmeta$
}