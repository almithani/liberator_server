worker_processes  1;
error_log /var/log/error.log;

events {
    worker_connections 1024;
}

http {

    include       mime.types;
    default_type  text/html;

    #access_log  logs/access.log  main;

    #sendfile        on;
    #tcp_nopush      on;
    keepalive_timeout  65;

    server {
        listen 80 default_server;
        root /var/www/liberator_app;
        default_type text/html;
    }

    #this is the book server
    server {
        listen 8080;
        server_name localhost;
        #root   /usr/local/openresty/nginx/html;
        root   /var/www/books;
        default_type text/html;

        location / {
            #allow access to all other files...this is dangerous and should be changed later
            add_header Access-Control-Allow-Origin *;
        }

        #this location should match all our html files that are within "book" directories
        location ~ /(.*)/.+/.+\.html$ {
            add_header Access-Control-Allow-Origin *;

            #sub the urls to external files in the html w/ our server url
            sub_filter_once off;
            sub_filter_types *;
            #TODO: replace port w/ a variable $port?
            #TODO: instead of doing this rewrite fix image paths in unpack.py
            #sub_filter 'src="../' 'src="';
            sub_filter 'src="' 'src="http://$host:8080/$1/image/';

            try_files $uri = @closest_file;
        }

        location @closest_file {
            
            #rewrite ^/(.*)/(.*)/.*$ /$1/$2/0.html;
            rewrite_by_lua_block {
                local uri_regex = ngx.re.match(ngx.var.request_uri, "^/(.*)/(.*)/(\\d*)\\.html$")
                if uri_regex then 

                    -- round down to closest 30000
                    local file_number_path = math.floor(uri_regex[3]/30000)*30000
                    local new_path = "/" .. uri_regex[1] .. "/" .. uri_regex[2] .. "/" .. file_number_path .. ".html"
                    return ngx.redirect(new_path)

                else 
                    ngx.say("not matched!") 
                end
            }
        }

        # https://dev.to/bambattajb/creating-an-api-with-lua-using-openresty-42mc
        # POST: this endpoint writes a reader's location to a files
        # GET: this endpoint gets a certain reader's place
        location ~ /(.*)/api/bookmark$ {
            default_type 'text/json';
            add_header 'Content-Type' 'application/json';

            content_by_lua_block {
                local cjson = require("cjson");
                local file = io.open("/var/www/books/"..ngx.var[1].."/"..ngx.var.arg_reader..".bookmark", "w");
                file:write(ngx.var.arg_char.."\n");
                file:close();

                return ngx.say(
                    cjson.encode({
                        status='OK'
                    })
                );
            }
        } #locat
    }
}